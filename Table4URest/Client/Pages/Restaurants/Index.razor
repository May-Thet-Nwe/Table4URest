@page "/restaurants/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title"> Restaurants</h3>
<br />

<a href="/restaurants/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Restaurant
</a>
<br />
<br />


@if (Restaurants == null)
{
    <div class="alert alert-info"> Loading Restaurant...</div>
}
else
{
    <table class="table table-responsive" id="restaurantsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Menu Picture</th>
                <th>Address</th>
                <th>Postal Code</th>
                <th>Contact</th>
                <th>Price Range</th>
                <th>Serve Range</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var restaurant in Restaurants)
            {
                <tr>
                    <td>@restaurant.Name</td>
                    <td>                        
                        @if (restaurant.menuPic != null && restaurant.menuPic.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(restaurant.menuPic)" alt="Menu Picture" style="max-width: 100px; max-height: 100px;" />
                        }
                        else
                        {
                            <span>No Menu Picture</span>
                        }                     
                    </td>
                    <td>@restaurant.Address</td>

                    @* open googlemap in new tab *@

                    <td><a href="@GetGoogleMapsLink(restaurant)" target="_blank">@restaurant.LocationFilter.PostalCode</a></td>     
                    <td>@restaurant.Contact</td>
                    <td>@restaurant.PriceFilter.PriceRange</td>
                    <td>@restaurant.ServeFilter.ServeRange</td>

                    <td>
                        <a href="/restaurants/view/@restaurant.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/restaurants/edit/@restaurant.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(restaurant.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Restaurant>? Restaurants;
    private bool isDataTableInitialized = false;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
    }

    async Task Delete(int restaurantId)
    {
        if (Restaurants != null)
        {
            var restaurant = Restaurants.First(q => q.Id == restaurantId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {restaurant.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#restaurantsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#restaurantsTable");
    }
    string GetGoogleMapsLink(Restaurant restaurant)
    {
        string address = $"{restaurant.LocationFilter.PostalCode}, {restaurant.LocationFilter.PostalCode}";
        string googleMapsUrl = $"https://www.google.com/maps?q={Uri.EscapeDataString(address)}";        /* generates url by adding address */
        return googleMapsUrl;
    }
}

