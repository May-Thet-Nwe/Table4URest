@inject HttpClient _client
<EditForm Model="@restaurant" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled = "@Disabled">
        <div class="form-group">
            <label>Name:</label>
            <div>
                <InputText @bind-Value="@restaurant.Name" class="form-control" />
                <ValidationMessage For="@(()=> restaurant.Name)" />
            </div>
        </div>
        <div class="form-group">
            <label>Menu Picture: </label>
            <div>
                @if (restaurant.menuPic != null && restaurant.menuPic.Length > 0)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(restaurant.menuPic)" alt="Menu Picture" style="max-width: 100px; max-height: 100px;" />
                }
                else
                {
                    <span>No Picture</span>
                }

                @if (!Disabled)
                {
                    <InputFile OnChange="HandleFileUpload" class="form-control" />
                }

                <ValidationMessage For="@(()=>restaurant.menuPic)" />
            </div>
        </div>
        <div class="form-group">
            <label>Address:</label>
            <div>
                <InputText @bind-Value="@restaurant.Address" class="form-control" />
                <ValidationMessage For="@(()=> restaurant.Address)" />
            </div>
        </div>


        <div class="form-group">
            <label>Location</label>
            <div>
                <InputSelect @bind-Value="restaurant.LocationFilterId" class="form-control">
                    <option value=" ">--select location--</option>
                    @if (LocationFilters != null)
                    {
                        foreach (var locationfilter in LocationFilters)
                        {
                            <option value="@locationfilter.Id">@locationfilter.PostalCode</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=> restaurant.LocationFilterId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Contact:</label>
            <div>
                <InputNumber @bind-Value="@restaurant.Contact" class="form-control" />
                <ValidationMessage For="@(()=> restaurant.Contact)" />
            </div>
        </div>
        <div class="form-group">
            <label>Price</label>
            <div>
                <InputSelect @bind-Value="restaurant.PriceFilterId" class="form-control">
                    <option value=" ">--select price--</option>
                    @if (PriceFilters != null)
                    {
                        foreach (var pricefilter in PriceFilters)
                        {
                            <option value="@pricefilter.Id">@pricefilter.PriceRange</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=> restaurant.PriceFilterId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Serve</label>
            <div>
                <InputSelect @bind-Value="restaurant.ServeFilterId" class="form-control">
                    <option value=" ">--select serve--</option>
                    @if (ServeFilters != null)
                    {
                        foreach (var servefilter in ServeFilters)
                        {
                            <option value="@servefilter.Id">@servefilter.ServeRange</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=> restaurant.ServeFilterId)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    
    <BackToList Target="restaurants" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Restaurant? restaurant { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<LocationFilter>? LocationFilters;
    private IList<PriceFilter>? PriceFilters;
    private IList<ServeFilter>? ServeFilters;

    protected async override Task OnInitializedAsync()
    {
        LocationFilters = await _client.GetFromJsonAsync<List<LocationFilter>>($"{Endpoints.LocationFiltersEndpoint}");
        PriceFilters = await _client.GetFromJsonAsync<List<PriceFilter>>($"{Endpoints.PriceFiltersEndpoint}");
        ServeFilters = await _client.GetFromJsonAsync<List<ServeFilter>>($"{Endpoints.ServeFiltersEndpoint}");


    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e) 
    { 
        var file = e.File; 
        if (file != null) 
        { 
            using (var stream = file.OpenReadStream()) 
            { 
                using (var memoryStream = new MemoryStream()) 
                { 
                    await stream.CopyToAsync(memoryStream); 
                    restaurant.menuPic = memoryStream.ToArray(); 
                } 
            } 
        } 
    }
}
