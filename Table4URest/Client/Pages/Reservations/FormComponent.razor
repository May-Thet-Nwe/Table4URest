@inject HttpClient _client
<EditForm Model="@reservation" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />                                                                @* display errors at top of form *@
    <fieldset disabled="@Disabled">                                                      @* group elements *@
        <div class="form-group">
            <label>Customer: </label>

            <div>
                <InputSelect @bind-Value="reservation.CustomerId" class="form-control">  @* drop down box for customer selection/bind the value in CustomerId *@
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)                                              @* iterate & show cust's name and email when not null *@
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Name - @customer.Email</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => reservation.CustomerId)" />             @* show msg when error *@
            </div>
        </div>

        <div class="form-group">
            <label>Restaurant: </label>

            <div>
                <InputSelect @bind-Value="reservation.RestaurantId" class="form-control">
                    <option value="">-- Select Restaurant --</option>
                    @if (Restaurants != null)
                    {
                        foreach (var restaurant in Restaurants)
                        {
                            <option value="@restaurant.Id">@restaurant.Name - @restaurant.Address - @restaurant.ServeFilter.ServeRange</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => reservation.RestaurantId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Adult Number:</label>
            <div>
                <InputNumber @bind-Value="@reservation.AdultNum" class="form-control" />
                <ValidationMessage For="@(()=> reservation.AdultNum)" />
            </div>
        </div>

        <div class="form-group">
            <label>Children Number:</label>
            <div>
                <InputNumber @bind-Value="@reservation.ChildNum" class="form-control" />
                <ValidationMessage For="@(()=> reservation.ChildNum)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Time: </label>
            <div>
            @* select both date and time, cn=annot select earlier data time *@
                <input type="datetime-local" @bind="reservation.DateTime" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                <ValidationMessage For="@(() => reservation.DateTime)" />
            </div>
        </div>


    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }



    <BackToList Target="reservations" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Reservation? reservation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Restaurant>? Restaurants;
    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
}