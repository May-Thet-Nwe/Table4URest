@page "/reservations/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Restaurant Reservations</h3>
<br />

<a href="/reservations/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Reservation
</a>
@if (Reservations == null)
{
    <div class="alert alert-info">Loading Reservations...</div>
}
else
{
    <table class=" table table-responsive" id="reservationsTable">
        <thead>
            <tr>
                <th>Reservation Id</th>
                <th>Customer</th>
                <th>Restaurant</th>
                <th>Adult No.</th>
                <th>Children No.</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var reservation in Reservations)
            {
                <tr>
                    <td>@reservation.Id</td>
                    <td>@reservation.Customer.Name</td>
                    <td>@reservation.Restaurant.Name</td>
                    <td>@reservation.AdultNum</td>
                    <td>@reservation.ChildNum</td>
                    <td>@reservation.DateTime.ToString("dd MMMM yyyy HH:mm")</td>
                    <td>
                        <a href="/reservations/view/@reservation.Id" class=" btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/reservations/edit/@reservation.Id" class=" btn btn-warning">
                            <span class=" oi oi-pencil"></span>
                        </a>
                        <button class=" btn btn-danger" @onclick="@(() =>Delete(reservation.Id))">
                            <span class=" oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Reservation>? Reservations;
    private bool isDataTableInitialized = false;  /* Not initialized */
    protected async override Task OnInitializedAsync()
    {  /* Get reservation list from server */
        _interceptor.MonitorEvent();
        Reservations = await _client.GetFromJsonAsync<List<Reservation>>($"{Endpoints.ReservationsEndpoint}");

    }

    async Task Delete(int reservationId)
    { /* Delete request from server */   
        if (Reservations != null)
        {
            var reservation = Reservations.First(q => q.Id == reservationId);
            // confirm with js confirm dialog
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {reservation.Id}?");

            if (confirm)                        /* when confirm, DELETE request from server, refresh list */
            {
                await _client.DeleteAsync($"{Endpoints.ReservationsEndpoint}/{reservationId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    { /* invoke adddatatable on the id selector */
        await js.InvokeVoidAsync("AddDataTable", "#reservationsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#reservationsTable");
    }
}