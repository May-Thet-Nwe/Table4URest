@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Restaurant Reviews</h3>
<br />

<a href="/reviews/test" class="btn btn-secondary">
    <span class="oi oi-plus"></span> Create Review test
</a>
<br />
<br />

@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews...</div>
}
else
{
    <table class=" table table-responsive" id="reviewsTable">
        <thead>
            <tr>
                <th>Review Id</th>
                <th>Customer</th>
                <th>Restaurant</th>
                <th>Ratings</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var review in Reviews)
            {
                <tr>
                    <td>@review.Id</td>
                    <td>@review.Customer.Name</td>
                    <td>@review.Restaurant.Name</td>
                    <td>@DisplayStars(review.Reviews)</td>
                    @* <td>@DisplayStars(review.Reviews)</td>  *@
                   @*  <td>
                        @{
                            for (int i = 1; i <= review.Reviews; i++)
                            {
                                <span class="oi oi-star text-warning"></span>
                            }
                            for (int i = review.Reviews + 1; i <= 5; i++)
                            {
                                <span class="oi oi-star text-secondary"></span>
                            }
                        }
                    </td> *@
                    @* <td>
                        @{
                            for (int i = 1; i <= 5; i++)
                            {
                                <span class="oi oi-star @(i <= selectedStars ? "text-warning" : "text-secondary")"
                                      @onclick="@(() => SetSelectedStars(i))"></span>
                            }
                        }
                    </td> *@







                    <td>
                        <a href="/reviews/view/@review.Id" class=" btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/reviews/edit/@review.Id" class=" btn btn-warning">
                            <span class=" oi oi-pencil"></span>
                        </a>
                        <button class=" btn btn-danger" @onclick="@(() =>Delete(review.Id))">
                            <span class=" oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {


    private List<Review>? Reviews;
    private int selectedStars = 3; // Set the initial number of stars
    private bool isDataTableInitialized = false;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Id}?");

            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#reviewsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
    }
    MarkupString DisplayStars(int rating) 
    { 
        var starIcons = new List<string>(); 
        for (int i = 1; i <= rating; i++) 
        { 
            starIcons.Add("<span class=\"oi oi-star text-warning\"></span>"); 
        } 
        for (int i = rating + 1; i <= 5; i++) 
        {
            starIcons.Add("<span class=\"oi oi-star text-secondary\"></span>"); 
        } 
        return new MarkupString(string.Join("", starIcons)); 
    }

      
    



}