@page "/servefilters/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title"> Serves</h3>
<br />

@if (ServeFilters == null)
{
    <div class="alert alert-info"> Loading Serve...</div>
}
else
{
    <table class="table table-responsive" id="servefiltersTable">
        <thead>
            <tr>
                <th>Serve Range</th>
               
            </tr>
        </thead>
        <tbody>
            @foreach (var servefilter in ServeFilters)
            {
                <tr>
                    <td>@servefilter.ServeRange</td>
                    
                   
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ServeFilter>? ServeFilters;
    private bool isDataTableInitialized=false;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        ServeFilters = await _client.GetFromJsonAsync<List<ServeFilter>>($"{Endpoints.ServeFiltersEndpoint}");
    }

    async Task Delete(int servefilterId)
    {
        if (ServeFilters != null)
        {
            var servefilter = ServeFilters.First(q => q.Id == servefilterId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {servefilter.ServeRange}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ServeFiltersEndpoint}/{servefilterId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#servefiltersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#servefiltersTable");
    }
}

