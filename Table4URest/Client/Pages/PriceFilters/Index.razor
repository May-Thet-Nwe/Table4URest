@page "/pricefilters/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title"> Prices</h3>
<br />

@if (PriceFilters == null)
{
    <div class="alert alert-info"> Loading Price...</div>
}
else
{
    <table class="table table-responsive" id="pricefiltersTable">
        <thead>
            <tr>
                <th>Price Range</th>
           
            </tr>
        </thead>
        <tbody>
            @foreach (var pricefilter in PriceFilters)
            {
                <tr>
                    <td>@pricefilter.PriceRange</td>

                    
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PriceFilter>? PriceFilters;
    private bool isDataTableInitialized = false;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        PriceFilters = await _client.GetFromJsonAsync<List<PriceFilter>>($"{Endpoints.PriceFiltersEndpoint}");
    }

    async Task Delete(int pricefilterId)
    {
        if (PriceFilters != null)
        {
            var pricefilter = PriceFilters.First(q => q.Id == pricefilterId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {pricefilter.PriceRange}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PriceFiltersEndpoint}/{pricefilterId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#pricefiltersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#pricefiltersTable");
    }
}

